created: 20140210141217955
modified: 20150119191956000
tags: Filters
title: Filter Syntax
type: text/vnd.tiddlywiki

<<.preamble """[[Filters]] follow a grammar that is presented here, using [[RailroadDiagrams]], for those who find formal syntax descriptions helpful. However, you can [[learn to write filters|Introduction to filter notation]] without needing to understand this tiddler.""">>

A <<.def filter>> is a pipeline for transforming an <<.def input>> into an <<.def output>>. Both the input and the output are [[ordered sets|Title Selections]] of tiddler titles or similar strings.

Filters are built from smaller pieces, called ''runs'' and ''steps'', each of which also transforms an input to an output.

---

;filter
: <$railroad text="""
[{: [:whitespace] ("+"|:-|"-") run }]
"""/>

A filter starts with an empty output. Its runs are processed from left to right, progressively modifying the output.

A run's input is normally a list of all the non-shadow tiddler titles in the wiki (in no particular order). But the `+` prefix can change this.

* If a run has no `+` or `-` prefix, its output titles are [[dominantly appended|Dominant Append]] to the filter's output.
* If a run has a `-` prefix, its output titles are <<.em removed>> from the filter's output (if they were present).
* If a run has a `+` prefix, it receives the filter's output so far as its input. The filter's output is then completely <<.em replaced>> by the run's output. Any subsequent run reverts to receiving all tiddler titles as its input, unless it too has a `+` prefix.

In concise technical terms:

|!Run |!Interpretation |!Output |
|`run` |union of sets |... OR run |
|`+run` |intersection of sets |... AND run |
|`-run` |difference of sets |... AND NOT run |

---

;run
: <$railroad text="""
( "[" {step} "]"
  |
  [:{/"anything but [ ] or whitespace"/}]
  |
  '"' [:{/'anything but "'/}] '"'
  |
  "'" [:{/"anything but '"/}] '"'
)
"""/>

The steps of a run are processed from left to right. The input to the first step is same as the input to the run. For each subsequent step, the input is the output of the previous step.

{{Absolute Operators}}

The lower three options in the diagram match `HelloThere`, `"HelloThere"` and `'HelloThere'`, and are short for `[title[HelloThere]]`. The two quoted options exist to support titles that contain square brackets: `"An [[[[Unusual]]]] Tiddler"`.

---

;step
: <$railroad text="""
[:"!"] [:operator [:":" suffix] ] parameter
"""/>

The <<.def operator>> is drawn from a list of [[predefined names|Filter Operators]], which can be extended by plugins. Any unrecognised operator is treated as if it was the suffix to the <<.olink field>> operator. If a step's operator is omitted altogether, it defaults to `title`.

The <<.def suffix>> is additional text, usually the name of a [[field|TiddlerFields]], that extends the meaning of certain operators.

---

;parameter
: <$railroad text="""
( "[" [:{/"anything but ]"/}] "]"
  |
  "{" [:{/"anything but }"/}] "}"
  |
  "<" [:{/"anything but >"/}] ">"
)
"""/>

* `[`...`]` encloses a direct parameter
* `{`...`}` encloses a transcluded parameter
* `<`...`>` encloses a [[variable|Variables]] parameter

---

;whitespace
: <$railroad text="""
{( "space" | "tab" | "linefeed" | "return" | "vertical tab" | "formfeed" )}
"""/>
